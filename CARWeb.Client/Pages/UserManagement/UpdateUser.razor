@inject IClientUserManagementService ClientUserManagementService

<InputDesign />

<MudDialog>
    <DialogContent>

        <div class="px-sm-2 mt-n4 px-1 pb-4 form-div">

            <DialogHeader title="EDIT USER" icon="@Icons.Material.Filled.Edit" />

            <div class="mt-3">
                <form @onsubmit="HandleSubmit">
                    <div class="main-input-cont">
                        <label class="d-flex">Username <label class="ml-1" style="color: #FF4F53;">*</label></label>
                        <input type="text" @bind="payload.Username" placeholder="sample username">
                    </div>
                    <div class="d-flex gap-3">
                        <div class="main-input-cont w-100">
                            <label class="d-flex">First Name <label class="ml-1" style="color: #FF4F53;">*</label></label>
                            <input type="text" @bind="payload.UserFirstName" placeholder="sample first name">
                        </div>
                        <div class="main-input-cont w-100">
                            <label class="d-flex">Last Name <label class="ml-1" style="color: #FF4F53;">*</label></label>
                            <input type="text" @bind="payload.UserLastName" placeholder="sample first name">
                        </div>
                    </div>
                    <div class="main-input-cont">
                        <label class="d-flex mb-n1">Status <label class="ml-1" style="color: #FF4F53;">*</label></label>
                        <MudRadioGroup @bind-Value="payload.IsActive">
                            <MudRadio Value="true" Color="Color.Primary" UncheckedColor="Color.Default">ACTIVE</MudRadio>
                            <MudRadio Value="false" Color="Color.Info" UncheckedColor="Color.Default">INACTIVE</MudRadio>
                        </MudRadioGroup>
                    </div>
                    <div class="main-input-cont">
                        <label class="d-flex">Role <label class="ml-1" style="color: #FF4F53;">*</label></label>
                        @foreach (var role in RoleResponseData)
                        {
                            <MudCheckBox T="bool"
                            @key="role.Id"
                            Label="@role.Role"
                            Checked="@selectedRoleIds.Contains(role.Id)"
                            CheckedChanged="@(checkedVal => ToggleRoleSelection(role.Id, checkedVal))" />
                        }
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <SubmitButton isLoading="isLoading" button_name="UPDATE" className="submit-btn" />
                    </div>
                </form>
            </div>

        </div>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();

    [Parameter] public int? Id { get; set; }

    [Parameter] public EditUserDTO? payload { get; set; } = new EditUserDTO();

    [Parameter] public GetUsersDTO? ResponseData { get; set; } = new GetUsersDTO();

    private List<GetUserRoleDTO> RoleResponseData = new List<GetUserRoleDTO>();

    private HashSet<int> selectedRoleIds { get; set; } = new();

    public bool isLoading = false;

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        RoleResponseData = await ClientUserManagementService.GetRoleList();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id != null)
        {
            payload.Username = ResponseData.Username;
            payload.UserFirstName = ResponseData.FirstName;
            payload.UserLastName = ResponseData.LastName;
            payload.IsActive = ResponseData.IsActive;

            selectedRoleIds = ResponseData.AccessRoles
              .Select(r => r.UserRoleId)
              .ToHashSet();
        }
        UpdateSelectedRoles();
    }

    private void UpdateSelectedRoles()
    {
        payload.AccessRoles = selectedRoleIds
            .Select(id => new CreateAccessRole { UserRoleId = id })
            .ToList();
    }

    private void ToggleRoleSelection(int roleId, bool isChecked)
    {
        if (isChecked)
            selectedRoleIds.Add(roleId);

        else
            selectedRoleIds.Remove(roleId);

        UpdateSelectedRoles();
    }

    void HandleSubmit()
    {
        MudDialog.Close(DialogResult.Ok(payload));
    }

}
