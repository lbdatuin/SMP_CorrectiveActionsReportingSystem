@page "/create-car-form"
@using CARWeb.Client.Pages.CAR.Components
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IClientCAREntryService ClientCAREntryService
@inject IClientUserManagementService ClientUserManagementService
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject ModifiedSnackBar ModifiedSnackbar
@inject SubmitModal SubmitModal 

<style>
    .mud-typography-body1{
    font-family: 'Poppins'!important;
    font-size: 13px;
    }
</style>

<NavHeader title="CORRECTIVE ACTION" _items="_items" />
<InputDesign/>

<div class="mt-3">
    <i class="fi fi-ss-angle-circle-left back-btn" @onclick="Back"></i>
</div>

<div class="cont">
    <EditForm Model="@Payload">
        <MudTabs Outlined="true" Rounded="true" HideSlider="true" AlwaysShowScrollButtons="true">
            <MudTabPanel Text="HEADER" >
                <Header Payload="Payload" selectedStandardIds="selectedStandardIds" selectedNonConformityIds="selectedNonConformityIds" />
            </MudTabPanel>
            <MudTabPanel Text="DETAILS OF ISSUE & EVIDENCE" >
                <DetailsOfIssue Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="IMMEDIATE CORRECTION/S">
                <ImmediateCorrection Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="ELIMINATION OF NONCONFORMITY">
                <EliminationOfNonConformity Payload="Payload"  />
            </MudTabPanel>
            <MudTabPanel Text="CORRECTIVE ACTION">
                <CorrectiveAction Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="IMS VERIFICATION" Disabled="true">
                <IMSVerification Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="FOLLOW-UP STATUS & CLOSURE" Disabled="true">
                <FollowUpStatus Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="STATUS OF EFFECTIVENESS" Disabled="true">
                <StatusOfEffectiveness Payload="Payload" />
            </MudTabPanel>
        </MudTabs>
        <div class="mt-5 d-flex justify-content-end gap-2">
             <SubmitButton isLoading="isLoading" button_name="SUBMIT" className="submit-btn" OnClick="Submit" />
        </div>
    </EditForm>
</div>

@code{

    public CreateCARHeaderDTO Payload { get; set; } = new CreateCARHeaderDTO();

    public GetCARHeaderDTO ResponseData = new GetCARHeaderDTO();

    private CreateReturnCommentDTO CommentPayload = new CreateReturnCommentDTO();

    public List<int> AccessRoleResponseData = new List<int>();

    private string? UserId = string.Empty;

    public HashSet<int> selectedStandardIds = new();

    private HashSet<int> selectedNonConformityIds = new();

    public bool isLoading = false;

    public bool IsIMSRole = true;

    public bool IsCreateApprovalReview = true;

    private bool IsApprover = false;

    private bool IsReview = false;

    private bool IsFirstFollowUp = false;

    private bool IsSecThirdFollowUp = false;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState token_auth_state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = token_auth_state.User;
        UserId = user.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(UserId))
        {
            AccessRoleResponseData = await ClientUserManagementService.GetRoleListById(Guid.Parse(UserId));

            if (AccessRoleResponseData.Contains(1) || AccessRoleResponseData.Contains(3))
            {
                IsIMSRole = false;
            }
        }
    }

    private List<BreadcrumbItem> _items =
    [
        new("Data Entry", href: null, disabled: true),
        new("Creation Of CAR", href: null, disabled: true),
        new("Form", href: "/create-car-form")
    ];

    private void Back(){
        NavigationManager.NavigateTo("/corrective-action");
    }

    private async Task Submit(){
        await ClientCAREntryService.CreateEntry(Payload);
    }

}