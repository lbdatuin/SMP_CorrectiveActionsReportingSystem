@page "/car-form"
@page "/car-form/{id:int}"
@page "/car-form/{id:int}/{mode}"
@using CARWeb.Client.Pages.CAR.Components
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IClientCAREntryService ClientCAREntryService
@inject IClientUserManagementService ClientUserManagementService
@inject AuthenticationStateProvider AuthStateProvider
@inject IClientFileUploadService ClientFileUploadService
@inject IClientDepartmentService ClientDepartmentService
@inject IDialogService DialogService
@inject ModifiedSnackBar ModifiedSnackbar
@inject SubmitModal SubmitModal 

<style>
    .mud-typography-body1{
    font-family: 'Poppins'!important;
    font-size: 13px;
    }
</style>

@* <img src="/api/carentry/image-proxy?path=favicon.png" /> *@



<NavHeader title="CORRECTIVE ACTION" _items="_items" />
<InputDesign/>

<div class="mt-3">
    <i class="fi fi-ss-angle-circle-left back-btn" @onclick="Back"></i>
</div>

<div class="cont">
    <EditForm Model="@Payload">
        <MudTabs Outlined="true" Rounded="true" HideSlider="true" AlwaysShowScrollButtons="true" KeepPanelsAlive="true">
            <MudTabPanel Text="HEADER" >
                <Header Payload="Payload" selectedIssuedByDeptId="selectedIssuedByDeptId" selectedIssuedToDeptId="selectedIssuedToDeptId" selectedIssuedToSectionsIds="selectedIssuedToSectionsIds" selectedIssuedBySectionsIds="selectedIssuedBySectionsIds" selectedStandardIds="selectedStandardIds" selectedNonConformityIds="selectedNonConformityIds" DepartmentResponseData="DepartmentResponseData" ReturnCommentResponseData="ReturnCommentResponseData" />
            </MudTabPanel>
            <MudTabPanel Text="DETAILS OF ISSUE & EVIDENCE" >
                <DetailsOfIssue Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="IMMEDIATE CORRECTION/S">
                <ImmediateCorrection Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="ELIMINATION OF NONCONFORMITY">
                <EliminationOfNonConformity Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="CORRECTIVE ACTION">
                <CorrectiveAction Payload="Payload" />
            </MudTabPanel>
            @if (IsApprover)
            {
                <MudTabPanel Text="IMS VERIFICATION" Disabled="true">
                    <IMSVerification Payload="Payload" />
                </MudTabPanel>
            }
            @if (IsReview){
                <MudTabPanel Text="IMS VERIFICATION" Disabled="true">
                    <IMSVerification Payload="Payload" />
                </MudTabPanel>
            }
            @if (IsProceed)
            {
                <MudTabPanel Text="IMS VERIFICATION">
                    <IMSVerification Payload="Payload" />
                </MudTabPanel>
            }
            @if (IsFollowUp)
            {
                <MudTabPanel Text="IMS VERIFICATION">
                    <IMSVerification Payload="Payload" />
                </MudTabPanel>
            }
            <MudTabPanel Text="FOLLOW-UP STATUS & CLOSURE" Disabled="!IsFollowUp">
                <FollowUpStatus @ref="followUpStatusRef" Payload="Payload" />
            </MudTabPanel>
            <MudTabPanel Text="STATUS OF EFFECTIVENESS" Disabled="!IsStatusOfEffectiveness">
                <StatusOfEffectiveness Payload="Payload" />
            </MudTabPanel>
        </MudTabs>
        <div class="mt-5 d-flex justify-content-end gap-2">
            @if (Mode != "view"){
                @if (!IsStatusOfEffectiveness)
                {
                    <SubmitButton button_name="RETURN" type="button" className="def-btn" OnClick="Return" />
                }
                @if (IsApprover)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="APPROVE" className="submit-btn" OnClick="Approve" />
                }
                @if (IsReview)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="REVIEW" className="submit-btn" OnClick="Review" />
                }
                @if (IsProceed)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="PROCEED" className="submit-btn" OnClick="Proceed" />
                }
                @if (IsUploadFirstFollowUp)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="SUBMIT" className="submit-btn" OnClick="EditFirstFollowUpEvidence" />
                }
                @if (IsVerifyFirstFollowUp)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="VERIFY" className="submit-btn" OnClick="VerifyFirstFollowUp" />
                }
                @if (IsUploadSecondFollowUp)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="SUBMIT" className="submit-btn" OnClick="EditSecondFollowUpEvidence" />
                }
                @if (IsVerifySecondFollowUp)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="VERIFY" className="submit-btn" OnClick="VerifySecondFollowUp" />
                }
                @if (IsUploadThirdFollowUp)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="SUBMIT" className="submit-btn" OnClick="EditThirdFollowUpEvidence" />
                }
                @if (IsVerifyThirdFollowUp)
                {
                    <SubmitButton isLoading="isLoading" type="button" button_name="VERIFY" className="submit-btn" OnClick="VerifyThirdFollowUp" />
                }
                @if (IsStatusOfEffectiveness)
                {
                    if (IsNoted == true)
                    {
                        <SubmitButton isLoading="isLoading" type="button" button_name="NOTE" className="submit-btn" OnClick="NoteEntry" />
                    }
                    else{
                        <SubmitButton isLoading="isLoading" type="button" button_name="CLOSE" className="submit-btn" OnClick="CloseEntry" />
                    }
                }
            }
        </div>
    </EditForm>
</div>

@code{

    [Parameter] public int? Id { get; set; }

    [Parameter] public string? Mode { get; set; }

    public CreateCARHeaderDTO Payload { get; set; } = new CreateCARHeaderDTO();

    public GetCARHeaderDTO? ResponseData = new GetCARHeaderDTO();

    private CreateReturnCommentDTO CommentPayload = new CreateReturnCommentDTO();

    private List<GetReturnComment> ReturnCommentResponseData = new List<GetReturnComment>();

    private List<GetDepartmentDTO> DepartmentResponseData = new List<GetDepartmentDTO>();

    public List<int> AccessRoleResponseData = new List<int>();

    private string? UserId = string.Empty;

    public HashSet<int> selectedStandardIds = new();

    private HashSet<int> selectedNonConformityIds = new();

    private HashSet<int> selectedIssuedToSectionsIds = new();

    private HashSet<int> selectedIssuedBySectionsIds = new();

    private int? selectedIssuedToDeptId;

    private int? selectedIssuedByDeptId;

    public bool isLoading = false;

    public bool IsIMSRole = true;

    public bool IsCreateApprovalReview = true;

    private bool IsApprover = false;

    private bool IsReview = false;

    private bool IsProceed = false;

    private bool IsFollowUp = false;

    private bool IsUploadFirstFollowUp = false;

    private bool IsVerifyFirstFollowUp = false;

    private bool IsUploadSecondFollowUp = false;

    private bool IsVerifySecondFollowUp = false;

    private bool IsUploadThirdFollowUp = false;

    private bool IsVerifyThirdFollowUp = false;

    private bool IsStatusOfEffectiveness = false;

    private bool IsNoted = false;

    private FollowUpStatus? followUpStatusRef;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState token_auth_state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = token_auth_state.User;
        UserId = user.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(UserId))
        {
            AccessRoleResponseData = await ClientUserManagementService.GetRoleListById(Guid.Parse(UserId));

            if (AccessRoleResponseData.Contains(1) || AccessRoleResponseData.Contains(3))
            {
                IsIMSRole = false;
            }
        }

        if(Mode == "create"){
            IsReview = false;
        }

        DepartmentResponseData = await ClientDepartmentService.GetDepartmentList();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            ResponseData = await ClientCAREntryService.GetSingleEntry((int)Id);

            IsCreateApprovalReview = false;

            // DATA FETCHING
            selectedStandardIds = ResponseData.StandardItems
              .Select(x => x.StandardId)
              .ToHashSet();

            selectedNonConformityIds = ResponseData.NonConformityItems
              .Select(x => x.NonConformityId)
              .ToHashSet();

            selectedIssuedToDeptId = ResponseData.CARIssuedTo.DepartmentId;

            selectedIssuedByDeptId = ResponseData.CARIssuedBy.DepartmentId;

            selectedIssuedToSectionsIds = ResponseData.CARIssuedTo.IssuedToItems
              .Select(x => x.DSectionId)
              .ToHashSet();

            selectedIssuedBySectionsIds = ResponseData.CARIssuedBy.IssuedByItems
              .Select(x => x.DSectionId)
              .ToHashSet();

            ReturnCommentResponseData = ResponseData.ReturnComments;

            Payload = new CreateCARHeaderDTO
            {
                SysRefNo = ResponseData.SysRefNo,
                CARNo = ResponseData.CARNo,
                RevisionNo = ResponseData.RevisionNo,
                RevisionDate = ResponseData.RevisionDate,
                Recurring = ResponseData.Recurring,
                NonRecurring = ResponseData.NonRecurring,
                IssuedTo = ResponseData.IssuedTo,
                IssuedBy = ResponseData.IssuedBy,
                IssuedDate = ResponseData.IssuedDate,
                Clauses = ResponseData.Clauses,
                CARTypeId = ResponseData.CARTypeId,
                TypeOfFinding = ResponseData.TypeOfFinding,
                TypeOfAccident = ResponseData.TypeOfAccident,
                Status = ResponseData.Status,

                StandardItems = ResponseData.StandardItems?.Select(x => new CreateStandardItem
                {
                    CARHeaderId = x.CARHeaderId,
                    StandardId = x.StandardId
                }).ToList() ?? new List<CreateStandardItem>(),

                NonConformityItems = ResponseData.NonConformityItems?.Select(x => new CreateNonConformityItem
                {
                    CARHeaderId = x.CARHeaderId,
                    NonConformityId = x.NonConformityId
                }).ToList() ?? new List<CreateNonConformityItem>(),

                DetailsOfIssue = new CreateDetailsOfIssue
                {
                    DetailsOfIssueDescription = ResponseData.DetailsOfIssue.DetailsOfIssueDescription,
                    DetailsOfIssueFiles = ResponseData.DetailsOfIssue.DetailsOfIssueFiles,
                    EvidenceDescription = ResponseData.DetailsOfIssue.EvidenceDescription,
                    EvidenceFiles = ResponseData.DetailsOfIssue.EvidenceFiles,
                    RequirementsDescription = ResponseData.DetailsOfIssue.RequirementsDescription,
                    RequirementsFiles = ResponseData.DetailsOfIssue.RequirementsFiles,
                    CARHeaderId = ResponseData.DetailsOfIssue.CARHeaderId
                },

                ImmediateCorrection = new CreateImmediateCorrection
                {
                    ActionsToCorrectDescription = ResponseData.ImmediateCorrection.ActionsToCorrectDescription,
                    ActionsToCorrectFiles = ResponseData.ImmediateCorrection.ActionsToCorrectFiles,
                    ActionsToDealDescription = ResponseData.ImmediateCorrection.ActionsToDealDescription,
                    ActionsToDealFiles = ResponseData.ImmediateCorrection.ActionsToDealFiles,
                    CARHeaderId = ResponseData.ImmediateCorrection.CARHeaderId
                },

                EliminationNonConformity = new CreateEliminationNonConformity
                {
                    IsSimilarSituation = ResponseData.EliminationNonConformity.IsSimilarSituation,
                    DepartmentId = ResponseData.EliminationNonConformity.DepartmentId,
                    IsSimilarSituationDescription = ResponseData.EliminationNonConformity.IsSimilarSituationDescription,
                    IsSimilarSituationFiles = ResponseData.EliminationNonConformity.IsSimilarSituationFiles,
                    IsWhyWhy = ResponseData.EliminationNonConformity.IsWhyWhy,
                    IsFishBone = ResponseData.EliminationNonConformity.IsFishBone,
                    IsFaultTree = ResponseData.EliminationNonConformity.IsFaultTree,
                    IsOthers = ResponseData.EliminationNonConformity.IsOthers,
                    MethodFiles = ResponseData.EliminationNonConformity.MethodFiles,
                    IsOthersDescription = ResponseData.EliminationNonConformity.IsOthersDescription,
                    RootCaseDescription = ResponseData.EliminationNonConformity.RootCaseDescription,
                    AnalyzedBy = ResponseData.EliminationNonConformity.AnalyzedBy,
                    AnalyzedDate = ResponseData.EliminationNonConformity.AnalyzedDate,
                    ApprovedBy = ResponseData.EliminationNonConformity.ApprovedBy,
                    ApprovalDate = ResponseData.EliminationNonConformity.ApprovalDate,
                    WorkerRepresentative = ResponseData.EliminationNonConformity.WorkerRepresentative,
                    ReviewedBy = ResponseData.EliminationNonConformity.ReviewedBy,
                    Designation = ResponseData.EliminationNonConformity.Designation,
                    ReviewedDate = ResponseData.EliminationNonConformity.ReviewedDate,
                    CARHeaderId = ResponseData.EliminationNonConformity.CARHeaderId
                },

                CorrectiveAction = new CreateCorrectiveAction
                {
                    PersonResponsible = ResponseData.CorrectiveAction.PersonResponsible,
                    DepartmentHead = ResponseData.CorrectiveAction.DepartmentHead,
                    ReviewedBy = ResponseData.CorrectiveAction.ReviewedBy,
                    ReviewerDesignation = ResponseData.CorrectiveAction.ReviewerDesignation,
                    ReviewedDate = ResponseData.CorrectiveAction.ReviewedDate,
                    InternalCommunicationFiles = ResponseData.CorrectiveAction.InternalCommunicationFiles,
                    IsManagementOfChange = ResponseData.CorrectiveAction.IsManagementOfChange,
                    ManagementOfChangeFiles = ResponseData.CorrectiveAction.ManagementOfChangeFiles,
                    CARHeaderId = ResponseData.CorrectiveAction.CARHeaderId,
                    CorrectiveActionItems = ResponseData.CorrectiveAction.CorrectiveActionItems.Select(x => new CreateCorrectiveActionItem
                    {
                        CAction = x.CAction,
                        Responsible = x.Responsible,
                        CompletionDate = x.CompletionDate,
                        CorrectiveActionId = x.CorrectiveActionId
                    }).ToList()
                },

                IMVerification = new CreateIMVerification
                {
                    IsQA = ResponseData.IMVerification.IsQA,
                    QAReason = ResponseData.IMVerification.QAReason,
                    IsQB = ResponseData.IMVerification.IsQB,
                    QBReason = ResponseData.IMVerification.QBReason,
                    IsQC = ResponseData.IMVerification.IsQC,
                    QCReason = ResponseData.IMVerification.QCReason,
                    IsQD = ResponseData.IMVerification.IsQD,
                    QDReason = ResponseData.IMVerification.QDReason,
                    IsQE = ResponseData.IMVerification.IsQE,
                    QEReason = ResponseData.IMVerification.QEReason,
                    CourseOfAction = ResponseData.IMVerification.CourseOfAction,
                    CheckedBy = ResponseData.IMVerification.CheckedBy,
                    CARHeaderId = ResponseData.IMVerification.CARHeaderId
                },

                FollowUpStatus = new CreateFollowUpStatus
                {
                    F1Date = ResponseData.FollowUpStatus.F1Date,
                    F1Evidences = ResponseData.FollowUpStatus.F1Evidences,
                    F1StatusOfActions = ResponseData.FollowUpStatus.F1StatusOfActions,
                    F1VerifiedBy = ResponseData.FollowUpStatus.F1VerifiedBy,
                    F2Date = ResponseData.FollowUpStatus.F2Date,
                    F2Evidences = ResponseData.FollowUpStatus.F2Evidences,
                    F2StatusOfActions = ResponseData.FollowUpStatus.F2StatusOfActions,
                    F2VerifiedBy = ResponseData.FollowUpStatus.F2VerifiedBy,
                    F3Date = ResponseData.FollowUpStatus.F3Date,
                    F3Evidences = ResponseData.FollowUpStatus.F3Evidences,
                    F3StatusOfActions = ResponseData.FollowUpStatus.F3StatusOfActions,
                    F3VerifiedBy = ResponseData.FollowUpStatus.F3VerifiedBy,
                    CARHeaderId = ResponseData.FollowUpStatus.CARHeaderId
                },

                StatusOfEffectiveness = new CreateStatusOfEffectiveness
                {
                    IsS1 = ResponseData.StatusOfEffectiveness.IsS1,
                    IsS2 = ResponseData.StatusOfEffectiveness.IsS2,
                    IsS3 = ResponseData.StatusOfEffectiveness.IsS3,
                    VerifiedBy = ResponseData.StatusOfEffectiveness.VerifiedBy,
                    NotedBy = ResponseData.StatusOfEffectiveness.NotedBy,
                    CARHeaderId = ResponseData.StatusOfEffectiveness.CARHeaderId
                }
            };

            // DEPT. HEAD APPROVING
            if (AccessRoleResponseData.Contains(4) && ResponseData.Status == CARStatus.NOTIFIED_HEAD)
            {
                IsApprover = true;
            }

            // FOR REVIEW - IMS HEAD, USER, REVIEWER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(6)) && ResponseData.Status == CARStatus.SUBMITTED)
            {
                IsReview = true;
            }

            // FOR PROCEED - IMS HEAD, USER, REVIEWER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(6)) && ResponseData.Status == CARStatus.REVIEWED)
            {
                IsProceed = true;
            }

            // FOR UPLOAD EVIDENCE OF FIRST FOLLOW UP - IMS USER
            if (AccessRoleResponseData.Contains(5) && ResponseData.Status == CARStatus.PROCEED)
            {
                IsFollowUp = true;
                IsUploadFirstFollowUp = true;
            }

            // FOR FIRST FOLLOW UP VERIFY - REVIEWER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(6)) && ResponseData.Status == CARStatus.UPLOAD_EVIDENCE_OF_FIRST_FOLLOW_UP)
            {
                IsFollowUp = true;
                IsVerifyFirstFollowUp = true;
            }

            // FOR UPLOAD EVIDENCE OF SECOND FOLLOW UP - IMS USER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(6)) && ResponseData.Status == CARStatus.DONE_FIRST_FOLLOW_UP)
            {
                IsFollowUp = true;
                IsUploadSecondFollowUp = true;
            }

            // FOR SECOND FOLLOW UP VERIFY - REVIEWER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(6)) && ResponseData.Status == CARStatus.UPLOAD_EVIDENCE_OF_SECOND_FOLLOW_UP)
            {
                IsFollowUp = true;
                IsVerifySecondFollowUp = true;
            }

            // FOR UPLOAD EVIDENCE OF THIRD FOLLOW UP - IMS USER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(6)) && ResponseData.Status == CARStatus.DONE_SECOND_FOLLOW_UP)
            {
                IsFollowUp = true;
                IsUploadThirdFollowUp = true;
            }

            // FOR THIRD FOLLOW UP VERIFY - REVIEWER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(6)) && ResponseData.Status == CARStatus.UPLOAD_EVIDENCE_OF_THIRD_FOLLOW_UP)
            {
                IsFollowUp = true;
                IsVerifyThirdFollowUp = true;
            }

            // FOR STATUS EFFECTIVENESS - IMS USER,HEAD,APPROVER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(4)) && ResponseData.Status == CARStatus.DONE_THIRD_FOLLOW_UP)
            {
                IsFollowUp = true;
                IsStatusOfEffectiveness = true;
            }

            // FOR ENTRY NOTED - IMS USER,HEAD,APPROVER
            if ((AccessRoleResponseData.Contains(3) || AccessRoleResponseData.Contains(5) || AccessRoleResponseData.Contains(4)) 
                && (ResponseData.Status == CARStatus.CLOSE_EFFECTIVE || ResponseData.Status == CARStatus.CLOSE_INEFFECTIVE))
            {
                IsFollowUp = true;
                IsStatusOfEffectiveness = true;
                IsNoted = true;
            }

        }

    }

    private List<BreadcrumbItem> _items =
    [
        new("Data Entry", href: null, disabled: true),
        new("Creation Of CAR", href: null, disabled: true),
        new("Form", href: "/car-form")
    ];

    private void Back(){
        NavigationManager.NavigateTo("/corrective-action");
    }

    private async Task Submit(){

        // FILE UPLOAD
        await UploadFirstFollowUpEvidence();

        await ClientCAREntryService.CreateEntry(Payload);
    }

    private async Task Approve(){
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to approve this entry?" }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await ClientCAREntryService.ApproveEntry((int)Id);
        }
    }

    private async Task Review()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to review this entry?" }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await ClientCAREntryService.ReviewEntry((int)Id);
        }
    }

    private async Task Proceed()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you mark this entry as proceed?" }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await ClientCAREntryService.ProceedEntry((int)Id, Payload);
        }
    }

    private async Task Return(){
        CommentPayload = new CreateReturnCommentDTO();
        var parameters = new DialogParameters();
        parameters.Add("Payload", CommentPayload);
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialogResult = await DialogService.Show<ReturnComment>("", parameters, options).Result;

        if (dialogResult.Data != null && dialogResult.Data is CreateReturnCommentDTO payload)
        {
            await ClientCAREntryService.ReturnEntry((int)Id, payload);
            CommentPayload = new CreateReturnCommentDTO();
        };
    }

    // FOLLOW-UP
    private async Task EditFirstFollowUpEvidence()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to submit this entry?" }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await UploadFirstFollowUpEvidence();
            await ClientCAREntryService.EditFirstFolowUp((int)Id, Payload);
        }
    }

    private async Task VerifyFirstFollowUp()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to verify the first follow-up?" }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await ClientCAREntryService.VerifyFirstFollowUp((int)Id);
        }
    }

    private async Task EditSecondFollowUpEvidence()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to submit this entry?" }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await UploadSecondFollowUpEvidence();
            await ClientCAREntryService.EditSecondFolowUp((int)Id, Payload);
        }
    }

    private async Task VerifySecondFollowUp()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to verify the second follow-up?" }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await ClientCAREntryService.VerifySecondFollowUp((int)Id);
        }
    }

    private async Task EditThirdFollowUpEvidence()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to submit this entry?" }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await UploadThirdFollowUpEvidence();
            await ClientCAREntryService.EditThirdFolowUp((int)Id, Payload);
        }
    }

    private async Task VerifyThirdFollowUp()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to verify the third follow-up?" }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await ClientCAREntryService.VerifyThirdFollowUp((int)Id);
        }
    }

    // CLOSING
    private async Task CloseEntry()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to close this entry?" }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await ClientCAREntryService.CloseEntry((int)Id, Payload);
        }
    }

    private async Task NoteEntry()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to note this entry?" }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ApprovalDialog>("Corrective Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await ClientCAREntryService.NoteEntry((int)Id);
        }
    }

    // UPLOADING
    private async Task UploadFirstFollowUpEvidence()
    {
        var actionF1Evidences = followUpStatusRef?.GetF1Evidences() ?? new();

        var uploadedF1EvidencesPaths = await ClientFileUploadService.UploadFilesViaApi(actionF1Evidences, "FirstFollowUp");

        Payload.FollowUpStatus.F1Evidences = uploadedF1EvidencesPaths;
    }

    private async Task UploadSecondFollowUpEvidence()
    {
        var actionF2Evidences = followUpStatusRef?.GetF2Evidences() ?? new();

        var uploadedF2EvidencesPaths = await ClientFileUploadService.UploadFilesViaApi(actionF2Evidences, "SecondFollowUp");

        Payload.FollowUpStatus.F2Evidences = uploadedF2EvidencesPaths;
    }

    private async Task UploadThirdFollowUpEvidence()
    {
        var actionF3Evidences = followUpStatusRef?.GetF3Evidences() ?? new();

        var uploadedF3EvidencesPaths = await ClientFileUploadService.UploadFilesViaApi(actionF3Evidences, "ThirdFollowUp");

        Payload.FollowUpStatus.F3Evidences = uploadedF3EvidencesPaths;
    }

}