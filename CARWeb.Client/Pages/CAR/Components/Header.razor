@inject IClientCARLabelService ClientCARLabelService

<style>
    .mud-checkbox{
    margin-bottom: -10px!important;
    }
</style>
<div class="header-cont">

    <div class="header">
        <div class="left-cont">
            <img src="images/sys/smpc-logo1.jpg" />
            <h2>Title Of Document :</h2>
            <div class="title">
                <h1>Corrective Action Report</h1>
                <h1>(CAR)</h1>
            </div>
        </div>
        <div class="right-cont">
            <div>
                <div class="input-cont">
                    <label class="d-flex">CAR No. :</label>
                    <input type="text" placeholder="System Generated" disabled>
                </div>
                <div class="input-cont">
                    <label class="d-flex">Revision No. :</label>
                    <input type="text" placeholder="-" @bind="Payload.RevisionNo" disabled>
                </div>
                <div class="input-cont">
                    <label class="d-flex">Revision Date :</label>
                    <input type="date" @bind="Payload.RevisionDate" disabled>
                </div>
            </div>
            <div class="standard-cont">
                <div class="standard">
                    <div class="main-input-cont">
                        <label>Standard :</label>
                        <div class="d-flex flex-column">
                            @foreach (var item in standardList)
                            {
                                <MudCheckBox T="bool"
                                    Label="@item.Code"
                                    Checked="@selectedStandardIds.Contains(item.Id)"
                                    CheckedChanged="@(checkedVal => ToggleStandardSelection(item.Id, checkedVal))" />
                            }
                        </div>
                    </div>
                </div>
                <div class="d-flex flex-column">
                    <MudCheckBox @bind-Value="Payload.Recurring">RECURRING</MudCheckBox>
                    <MudCheckBox @bind-Value="Payload.NonRecurring">NON RECURRING</MudCheckBox>
                </div>
            </div>
        </div>
    </div>
    <div class="issued">
        <div>
            <div class="input-cont">
                <label class="d-flex">Issued To :</label>
                <input type="text" @bind="Payload.IssuedTo" placeholder="-">
            </div>
            <div class="input-cont">
                <label class="d-flex">Issued By :</label>
                <input type="text" @bind="Payload.IssuedBy" placeholder="-">
            </div>
        </div>
        <div>
            <div class="input-cont">
                <label class="d-flex">Clause/s :</label>
                <input type="text" @bind="Payload.Clauses" placeholder="-">
            </div>
            <div class="input-cont">
                <label class="d-flex">Date Of Issuance :</label>
                <input type="date" @bind="Payload.IssuedDate">
            </div>
        </div>
    </div>
    <div class="note">
        <div class="note-title">Note:</div>
        @foreach(var note in Notes){
            <div class="note-item">@note.Description</div>
        }
    </div>

    <div class="details">
        <div class="details-header">1. DETAILS OF NONCONFORMITY</div>
        <div style="padding: 13px;">
            <div class="nonconformity">
                <div class="nc-col">
                    @foreach (var item in nonConformityList)
                    {
                        <div class="d-flex flex-column">
                            <div class="nc-item">
                                <MudCheckBox T="bool"Label="@item.Code" Checked="@selectedNonConformityIds.Contains(item.Id)" CheckedChanged="@(checkedVal => ToggleNonConfSelection(item.Id, checkedVal))" />
                            </div>

                            @if (item.Id == 1 && IsAccident)
                            {
                                <div class="main-input-cont ml-10 mt-3" style="width: 250px;">
                                    <select @bind="Payload.TypeOfAccident">
                                        <option value="SFT">SFT</option>
                                        <option value="ENV">ENV</option>
                                        <option value="OHS">OHS</option>
                                    </select>
                                </div>
                            }
                            else if (item.Id == 5 && IsUnmet)
                            {
                                <div class="main-input-cont ml-10 mt-3" style="width: 250px;">
                                    <select @bind="Payload.CARTypeId">
                                        <option value="0">-Select Type-</option>
                                        @foreach (var type in carTypeList)
                                        {
                                            <option value="@type.Id">@type.Code</option>
                                        }
                                    </select>
                                </div>
                            }
                            else if (item.Id == 8 && IsCompliance)
                            {
                                <div class="main-input-cont ml-10 mt-3" style="width: 250px;">
                                    <select @bind="Payload.TypeOfFinding">
                                        <option value="MAJOR NONCONFORMITY">MAJOR NONCONFORMITY</option>
                                        <option value="MINOR NONCONFORMITY">MINOR NONCONFORMITY</option>
                                    </select>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

    </div>

</div>

@code {

    [Parameter] public CreateCARHeaderDTO Payload { get; set; } = new CreateCARHeaderDTO();
    [Parameter] public HashSet<int> selectedStandardIds { get; set; } = new();
    [Parameter] public HashSet<int> selectedNonConformityIds { get; set; } = new();
    private List<GetCarTypeListDTO> carTypeList = new List<GetCarTypeListDTO>();
    private List<GetStandardListDTO> standardList = new List<GetStandardListDTO>();
    private List<GetNonConformityListDTO> nonConformityList = new List<GetNonConformityListDTO>();
    private bool IsUnmet = false;
    private bool IsAccident = false;
    private bool IsCompliance = false;
    private bool complianceDropdownShown = false;

    private class FormNotes{
        public string Description { get; set; } = string.Empty;
    }

    private List<FormNotes> Notes = new List<FormNotes>{
        new FormNotes { Description = "1. Identified Nonconformity shall be corrected not more than 150 days upon occurrence/detection of the issue." },
        new FormNotes { Description = "2. Actions requiring more than 150 days will be done via OTP/BSC and monitored the progress accordingly." },
        new FormNotes { Description = "3. Any Department can issue a Corrective Action Report (CAR) to any Department/are/entity as formal" },
        new FormNotes { Description = "Documented Information Maintained and Retained to address the issue as classified in instruction no. 1" },
    };

    protected override async Task OnInitializedAsync()
    {
        carTypeList = await ClientCARLabelService.GetCarTypeList();
        standardList = await ClientCARLabelService.GetStandardList();
        nonConformityList = await ClientCARLabelService.GetNonConformityList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        complianceDropdownShown = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        UpdateNonConfFlags();
    }

    private void ToggleStandardSelection(int standardId, bool isChecked)
    {
        if (isChecked)
            selectedStandardIds.Add(standardId);

        else
            selectedStandardIds.Remove(standardId);

        UpdateStandardItems();
    }

    private void UpdateStandardItems()
    {
        Payload.StandardItems = selectedStandardIds
            .Select(id => new CreateStandardItem { StandardId = id })
            .ToList();
    }

    private void ToggleNonConfSelection(int nonConfId, bool isChecked)
    {
        if (isChecked)
            selectedNonConformityIds.Add(nonConfId);
        else
            selectedNonConformityIds.Remove(nonConfId);

        IsUnmet = selectedNonConformityIds.Contains(5);
        IsAccident = selectedNonConformityIds.Contains(1);
        IsCompliance = selectedNonConformityIds.Contains(7) || selectedNonConformityIds.Contains(8);

        UpdateNonConfItems();
    }
        
    private void UpdateNonConfItems()
    {
        Payload.NonConformityItems = selectedNonConformityIds
            .Select(id => new CreateNonConformityItem { NonConformityId = id })
            .ToList();
    }

    private void UpdateNonConfFlags()
    {
        IsUnmet = selectedNonConformityIds.Contains(5);
        IsAccident = selectedNonConformityIds.Contains(1);
        IsCompliance = selectedNonConformityIds.Contains(7) || selectedNonConformityIds.Contains(8);
    }


}
