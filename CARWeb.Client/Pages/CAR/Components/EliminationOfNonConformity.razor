@inject IClientUserManagementService ClientUserManagementService

<div class="details">
    <div>
        <div class="details-header">3. ELIMINATION OF NONCONFORMITY</div>
        <div class="details-header-2">3.1 REVIEW OF RECURRENCE AND/OR OCCURRENCE ELSEWHERE, INCLUDING POTENTIAL EXISTENCE</div>
        <div class="details-header" style="margin-bottom: -5px;">Has a similar situation occured in any other department? Is there a possibility of it happening elsewhere?</div>
        <div class="detail-1-cont d-flex flex-column">
            <div class="d-flex">
                <MudRadioGroup T="bool" @bind-SelectedOption="Payload.EliminationNonConformity.IsSimilarSituation" class="d-flex flex-row ml-3">
                    <MudRadio Option="true" Color="Color.Dark">YES</MudRadio>
                    <MudRadio Option="false" Color="Color.Dark">NO</MudRadio>
                </MudRadioGroup>
            </div>
            <div class="main-input-cont">
                <div class="details-header" style="margin-left: 0px;">3.1 If Yes, specify where and why :</div>
                <textarea rows="3" placeholder="-" @bind="Payload.EliminationNonConformity.IsSimilarSituationDescription"></textarea>
            </div>
            <div class="main-input-cont">
                <div class="details-header" style="margin-left: 0px; margin-bottom: 15px;">3.2 If Yes, attach proof of evidence wherein the issue is communicated to the affected Department(s) :</div>
                <ListFileUpload title="UPLOAD FILE" isActive="true" OnFilesSelected="f => SimilarSituationFiles = f.ToList()" />
            </div>
        </div>
    </div>

    <div class="mt-3" style="border-top: 1px solid #ccc;">
        <div class="details-header">3.2 ROOT CAUSE</div>
        <div class="note-title" style="margin-bottom: -5px;">Note: Finalize root causes with the reviewer within 7 days from issuance.</div>
        <div class="detail-2-cont d-flex flex-column">
            <div class="d-flex mb-4" style="margin-left: -13px;">
                <MudCheckBox @bind-Value="Payload.EliminationNonConformity.IsWhyWhy">5-Why or Why-Why</MudCheckBox>
                <MudCheckBox @bind-Value="Payload.EliminationNonConformity.IsFishBone">Fishbone(Cause & Effect)</MudCheckBox>
                <MudCheckBox @bind-Value="Payload.EliminationNonConformity.IsFaultTree">Fault Tree Analysis</MudCheckBox>
                <MudCheckBox @bind-Value="Payload.EliminationNonConformity.IsOthers">Others</MudCheckBox>
            </div>
            <div class="main-input-cont">
                @if(Payload.EliminationNonConformity.IsOthers == true)
                {
                    <div class="mt-2">
                        <ListFileUpload title="UPLOAD FILE" isActive="true" OnFilesSelected="f => OthersFiles = f.ToList()" />
                        <textarea rows="3" placeholder="-" @bind="Payload.EliminationNonConformity.IsOthersDescription"></textarea>
                    </div>
                }
                <textarea rows="9" placeholder="Root Cause Summary" @bind="Payload.EliminationNonConformity.RootCaseDescription"></textarea>
            </div>
        </div>
        <div class="note-title" style="margin-top: -10px;">Note: A duly signed root cause analysis is required as an attachment.</div>
    </div>

    <div class="mt-3 detail-3-cont" style="border-top: 1px solid #ccc;">
        <div>
            <div class="input-cont">
                <label class="d-flex">Analyzed By :</label>
                <input type="text" @bind="Payload.EliminationNonConformity.AnalyzedBy">
            </div>
            <div class="input-cont">
                <label class="d-flex">Analyzed Date :</label>
                <input type="date" @bind="Payload.EliminationNonConformity.AnalyzedDate">
            </div>
            <div class="input-cont">
                <label class="d-flex">Approved By :</label>
                <select @bind="Payload.EliminationNonConformity.ApprovedBy">
                    <option value="0">-Select Approver-</option>
                    @foreach (var user in DepartmentApprovers)
                    {
                        <option value="@user">@user</option>
                    }
                </select>
            </div>
            <div class="text-center mb-3" style="font-size: 13px; font-weight: 500;">(Department Head)</div>
            <div class="input-cont">
                <label class="d-flex">Approved Date :</label>
                <input type="date" @bind="Payload.EliminationNonConformity.ApprovalDate" disabled>
            </div>
        </div>
        <div>
            <div class="input-cont">
                <label class="d-flex">Reviewed By :</label>
                <select value="@Payload.EliminationNonConformity.ReviewedBy" @onchange="OnReviewerChanged">
                    <option value="0">-Select Reviewer-</option>
                    @foreach (var user in EntryReviewers)
                    {
                        <option value="@user">@user</option>
                    }
                </select>
            </div>
            <div class="input-cont">
                <label class="d-flex">Designation :</label>
                <input type="text" placeholder="-" @bind="Payload.EliminationNonConformity.Designation" disabled>
            </div>
            <div class="input-cont">
                <label class="d-flex">Date :</label>
                <input type="date" @bind="Payload.EliminationNonConformity.ReviewedDate">
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public CreateCARHeaderDTO Payload { get; set; } = new CreateCARHeaderDTO();

    private List<IBrowserFile> SimilarSituationFiles = new();
    private List<IBrowserFile> OthersFiles = new();

    // Expose these to parent so it can upload during Submit
    public List<IBrowserFile> GetSimilarSituationFiles() => SimilarSituationFiles;
    public List<IBrowserFile> GetOthersFiles() => OthersFiles;

    private List<string> DepartmentApprovers = new List<string>();
    private List<string> EntryReviewers = new List<string>();
    private string ReviewerDesignation = string.Empty;

    private int? lastFetchedDeptId = null;

    protected override async Task OnInitializedAsync()
    {
        EntryReviewers = await ClientUserManagementService.GetEntryReviewer();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Payload.CARIssuedTo.DepartmentId > 0 && Payload.CARIssuedTo.DepartmentId != lastFetchedDeptId)
        {
            DepartmentApprovers = await ClientUserManagementService.GetDepartmentApprover(Payload.CARIssuedTo.DepartmentId);
            lastFetchedDeptId = Payload.CARIssuedTo.DepartmentId;
        }
    }

    private async Task OnReviewerChanged(ChangeEventArgs e)
    {
        var selectedReviewer = e.Value?.ToString();

        if (!string.IsNullOrEmpty(selectedReviewer))
        {
            Payload.EliminationNonConformity.ReviewedBy = selectedReviewer;
            Payload.CorrectiveAction.ReviewedBy = selectedReviewer;

            ReviewerDesignation = await ClientUserManagementService.GetReviewerDesignation(selectedReviewer);
            Payload.EliminationNonConformity.Designation = ReviewerDesignation;
            Payload.CorrectiveAction.ReviewerDesignation = ReviewerDesignation;
        }
    }



}
