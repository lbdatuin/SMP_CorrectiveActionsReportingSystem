@inject ISnackbar Snackbar

<style>
    .upload-btn{
        font-family: 'Poppins' !important;
        background: #f0f0f0 !important;
        color: #757581 !important;
        font-weight: 400 !important;
        font-size: 12px !important;
        border-radius: 7px;
        padding-top: 10px;
        padding-bottom: 10px;
        transition: .3s ease;
        margin-bottom: 10px;
        width: 100%;
        margin-top: -10px;
    }

    .upload-carousel{
        height: 500px;
        border-radius: 8px !important;
    }

    @@media only screen and (max-width: 600px) {
        .upload-carousel {
            height: 300px;
        }
    }
</style>

@if (shouldUpdate || displayFileNames.Any())
{
    <div class="mb-2">
        @foreach (var img in displayFileNames)
        {
            <span style="font-family: 'Poppins'; font-size: 13px; font-weight: 500; display: flex;" class="align-items-center">
                <i class="fa-solid fa-paperclip mr-2"></i> @img files attached
            </span>
        }
    </div>
}

@if (isActive)
{
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnFileChanged" AppendMultipleFiles Hidden="false"
                   Class="flex-1" InputClass="absolute mud-height-full overflow-hidden z-20" InputStyle="opacity:0">
        <ButtonTemplate Context="btnContext">
            <MudButton Class="upload-btn"
                       ButtonType="ButtonType.Button"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       StartIcon="@Icons.Material.Filled.FileUpload"
                       IconSize="Size.Small"
                       DisableElevation>
                Select Files to Upload
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>
}

@code {
    [Parameter] public EventCallback<IReadOnlyList<IBrowserFile>> OnFilesSelected { get; set; }
    [Parameter] public string title { get; set; } = string.Empty;
    [Parameter] public bool isActive { get; set; } = true;

    private List<IBrowserFile> FileDatas = new();
    private List<string> displayFileNames = new();
    private long maxFileSize = 1024 * 1024 * 5;
    private bool shouldUpdate = false;

    private bool IsFileValid(IBrowserFile file)
    {
        var allowedFileTypes = new HashSet<string>
        {
            "image/jpeg", "image/png", "image/jpg", "application/pdf",
            "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };

        if (!allowedFileTypes.Contains(file.ContentType))
        {
            Snackbar.Add($"Unsupported file type: {file.ContentType}", Severity.Error);
            return false;
        }

        if (file.Size > maxFileSize)
        {
            Snackbar.Add($"File too large: {file.Name}", Severity.Error);
            return false;
        }

        return true;
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        FileDatas.Clear();
        displayFileNames.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            if (!IsFileValid(file)) continue;

            FileDatas.Add(file);
            displayFileNames.Add(file.Name);
        }

        shouldUpdate = true;
        await OnFilesSelected.InvokeAsync(FileDatas); // Pass actual file content to parent
    }
}
